Divide and conquer - разделяне на проблема на подпроблеми, докато не стигнем до някакъв
тривиален case, след което почваме да обединяваме решенията. Проблемите са НЕЗАВИСИМИ един от
друг. Пример Merge sort, Quick sort, Tower of Hanoi, Fast matrix multiplication, Binary search,
Closest pair in 2D geometry

При DP проблемите се припокриват - например Fibonacci. 
Оптимална субструктура. Намирането на решение на 2 подпроблема ще дадът оптималното решение на
горния.Мемоизация.

Top-down - почваме от целия проблем и рекурсивно се спускаме по неговите подпроблеми. Съответно
има bottom-up.

LIS - longest increasing subsequence

При knapsack problem решението е псевдо-полиномиално. Скоростта зависи не толкова от размера
на входните данни, колкото от размера на раницата. O (n * c)
subset sum with repeats - също е псевдополиномиално - зависи от количеството nums, но и от 
target sum, защото на база на него правим boolean[]

Като цяло тези проблеми са NP hard/complete

Top-down - recursive + memoization
Bottom-up - iterative - обикновено пълнене на таблица или матрица