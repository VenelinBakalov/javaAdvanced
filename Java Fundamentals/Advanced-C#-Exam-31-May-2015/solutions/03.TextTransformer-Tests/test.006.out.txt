Overview[edit]Within software engineering programming the implementation is regarded as one phase in a software development process.There is an ongoing debate on the extent to which the writing of programs is an art form a craft or an engineering discipline.[3] In general good programming is considered to be the measured application of all three with the goal of producing an efficient and evolvable software solution the criteria for efficient and evolvable vary considerably. The discipline differs from many other technical professions in that programmers in general do not need to be licensed or pass any standardized or governmentally regulated certification tests in order to call themselves programmers or even software engineers. Because the discipline covers many areas which may or may not include critical applications it is debatable whether licensing is required for the profession as a whole. In most cases the discipline is selfgoverned by the entities which require the programming and sometimes very strict environments are defined e.g. United States Air Force use of AdaCore and security clearance. However representing oneself as a professional software engineer without a license from an accredited institution is illegal in many parts of the world.Another ongoing debate is the extent to which the programming language used in writing computer programs affects the form that the final program takes.[citation needed] This debate is analogous to that surrounding the SapirWhorf hypothesis[4] in linguistics and cognitive science which postulates that a particular spoken languages nature influences the habitual thought of its speakers. Different language patterns yield different patterns of thought. This idea challenges the possibility of representing the world perfectly with language because it acknowledges that the mechanisms of any language condition the thoughts of its speaker community.History[edit]See also: History of programming languagesAda Lovelace based on the work of Luigi Menabrea created the first algorithm designed for processing by a computer and is usually recognized as historys first computer programmer.Ancient cultures had no conception of computing beyond arithmetic algebra and geometry occasionally aping elements of calculus e.g. the method of exhaustion. The only mechanical device that existed for numerical computation at the beginning of human history was the abacus invented in Sumeria circa 2500 BC. Later the Antikythera mechanism invented some time around 100 BC in ancient Greece is the first known mechanical calculator utilizing gears of various sizes and configuration to perform calculations[5] which tracked the metonic cycle still used in lunartosolar calendars and which is consistent for calculating the dates of the Olympiads.[6] The Kurdish medieval scientist AlJazari built programmable automata in 1206 AD. One system employed in these devices was the use of pegs and cams placed into a wooden drum at specific locations which would sequentially trigger levers that in turn operated percussion instruments. The output of this device was a small drummer playing various rhythms and drum patterns.[7] The Jacquard loom which Joseph Marie Jacquard developed in 1801 uses a series of pasteboard cards with holes punched in them. The hole pattern represented the pattern that the loom had to follow in weaving cloth. The loom could produce entirely different weaves using different sets of cards. Charles Babbage adopted the use of punched cards around 1830 to control his Analytical Engine. Some believe that the first computer program was written for the Analytical Engine by mathematician Ada Lovelace to calculate a sequence of Bernoulli numbers.[8] The synthesis of numerical calculation predetermined operation and output along with a way to organize and input instructions in a manner relatively easy for humans to conceive and produce led to the modern development of computer programming. Development of computer programming accelerated through the Industrial Revolution.Data and instructions were once stored on external punched cards which were kept in order and arranged in program decks.In the 1880s Herman Hollerith invented the recording of data on a medium that could then be read by a machine. Prior uses of machine readable media above had been for lists of instructions not data to drive programmed machines such as Jacquard looms and mechanized musical instruments. After some initial trials with paper tape he settled on punched cards...[9] To process these punched cards first known as Hollerith cards he invented the keypunch sorter and tabulator unit record machines.[10] These inventions were the foundation of the data processing industry. In 1896 he founded the Tabulating Machine Company which later became the core of IBM. The addition of a control panel plugboard to his 1906 Type I Tabulator allowed it to do different jobs without having to be physically rebuilt. By the late 1940s there were several unit record calculators such as the IBM 602 and IBM 604 whose control panels specified a sequence list of operations and thus were programmable machines.The invention of the von Neumann architecture allowed computer programs to be stored in computer memory. Early programs had to be painstakingly crafted using the instructions elementary operations of the particular machine often in binary notation. Every model of computer would likely use different instructions machine language to do the same task. Later assembly languages were developed that let the programmer specify each instruction in a text format entering abbreviations for each operation code instead of a number and specifying addresses in symbolic form e.g. ADD X TOTAL. Entering a program in assembly language is usually more convenient faster and less prone to human error than using machine language but because an assembly language is little more than a different notation for a machine language any two machines with different instruction sets also have different assembly languages.Wired control panel for an IBM 402 Accounting MachineIn 1954 FORTRAN was invented; it was the first widelyused high level programming language to have a functional implementation as opposed to just a design on paper.[11][12] A highlevel language is in very general terms any programming language that allows the programmer to write programs in terms that are more abstract than assembly language instructions i.e. at a level of abstraction higher than that of an assembly language. It allowed programmers to specify calculations by entering a formula directly. The program text or source is converted into machine instructions using a special program called a compiler which translates the FORTRAN program into machine language. In fact the name FORTRAN stands for Formula Translation. Many other languages were developed including some for commercial programming such as COBOL. Programs were mostly still entered using punched cards or paper tape. See computer programming in the punch card era. By the late 1960s data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers. Text editors were developed that allowed changes and corrections to be made much more easily than with punched cards. Usually an error in punching a card meant that the card had to be discarded and a new one punched to replace it.As time has progressed computers have made giant leaps in the area of processing power. This has brought about newer programming languages that are more abstracted from the underlying hardware. Popular programming languages of the modern era include ActionScript C C C Haskell PHP Java JavaScript ObjectiveC Perl Python Ruby Smalltalk SQL Visual Basic and dozens more.[13] Although these highlevel languages usually incur greater overhead the increase in speed of modern computers has made the use of these languages much more practical than in the past. These increasingly abstracted languages are typically easier to learn and allow the programmer to develop applications much more efficiently and with less source code. However highlevel languages are still impractical for a few programs such as those where lowlevel hardware control is necessary or where maximum processing speed is vital. Computer programming has become a popular career in the developed world particularly in the United States Europe and Japan. Due to the high labor cost of programmers in these countries some forms of programming have been increasingly subject to offshore outsourcing importing software and services from other countries usually at a lower wage making programming career decisions in developed countries more complicated while increasing economic opportunities for programmers in less developed areas particularly China and India.Modern programming[edit]Question booknew.svgThis section relies largely or entirely upon a single source. Relevant discussion may be found on the talk page. Please help improve this article by introducing citations to additional sources. August 2010Quality requirements[edit]Whatever the approach to development may be the final program must satisfy some fundamental properties. The following properties are among the most relevant:Reliability: how often the results of a program are correct. This depends on conceptual correctness of algorithms and minimization of programming mistakes such as mistakes in resource management e.g. buffer overflows and race conditions and logic errors such as division by zero or offbyone errors.Robustness: how well a program anticipates problems due to errors not bugs. This includes situations such as incorrect inappropriate or corrupt data unavailability of needed resources such as memory operating system services and network connections user error and unexpected power outages.Usability: the ergonomics of a program: the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes. Such issues can make or break its success even regardless of other issues. This involves a wide range of textual graphical and sometimes hardware elements that improve the clarity intuitiveness cohesiveness and completeness of a programs user interface.Portability: the range of computer hardware and operating system platforms on which the source code of a program can be compiled/interpreted and run. This depends on differences in the programming facilities provided by the different platforms including hardware and operating system resources expected behavior of the hardware and operating system and availability of platform specific compilers and sometimes libraries for the language of the source code.Maintainability: the ease with which a program can be modified by its present or future developers in order to make improvements or customizations fix bugs and security holes or adapt it to new environments. Good practices during initial development make the difference in this regard. This quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long term.Efficiency/performance: the amount of system resources a program consumes processor time memory space slow devices such as disks network bandwidth and to some extent even user interaction: the less the better. This also includes careful management of resources for example cleaning up temporary files and eliminating memory leaks.Readability of source code[edit]In computer programming readability refers to the ease with which a human reader can comprehend the purpose control flow and operation of source code. It affects the aspects of quality above including portability usability and most importantly maintainability.Readability is important because programmers spend the majority of their time reading trying to understand and modifying existing source code rather than writing new source code. Unreadable code often leads to bugs inefficiencies and duplicated code. A study[14] found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.Following a consistent programming style often helps readability. However readability is more than just programming style. Many factors having little or nothing to do with the ability of the computer to efficiently compile and execute the code contribute to readability.[15] Some of these factors include:Different indentation styles whitespaceCommentsDecompositionNaming conventions for objects such as variables classes procedures etc.Various visual programming languages have also been developed with the intent to resolve readability concerns by adopting nontraditional approaches to code structure and display. Techniques like Code refactoring can enhance readability.Algorithmic complexity[edit]The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problem. For this purpose algorithms are classified into orders using socalled Big O notation which expresses resource use such as execution time or memory consumption in terms of the size of an input. Expert programmers are familiar with a variety of wellestablished algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.Methodologies[edit]The first step in most formal software development processes is requirements analysis followed by testing to determine value modeling implementation and failure elimination debugging. There exist a lot of differing approaches for each of those tasks. One approach popular for requirements analysis is Use Case analysis. Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years. There are many approaches to the Software development process.Popular modeling techniques include ObjectOriented Analysis and Design OOAD and ModelDriven Architecture MDA. The Unified Modeling Language UML is a notation used for both the OOAD and MDA.A similar technique used for database design is EntityRelationship Modeling ER Modeling.Implementation techniques include imperative languages objectoriented or procedural functional languages and logic languages.Measuring language usage[edit]Main article: Measuring programming language popularityIt is very difficult to determine what are the most popular of modern programming languages. Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language[16] the number of books sold and courses teaching the language this overestimates the importance of newer languages and estimates of the number of existing lines of code written in the language this underestimates the number of users of business languages such as COBOL.Some languages are very popular for particular kinds of applications while some languages are regularly used to write many different kinds of applications. For example COBOL is still strong in corporate data centers[17] often on large mainframes FORTRAN in engineering applications scripting languages in Web development and C in embedded applications. Many applications use a mix of several languages in their construction and use. New languages are generally designed around the syntax of a previous language with new functionality added for example C adds objectorientedness to C and Java adds memory management and bytecode to C but as a consequence looses efficiency and the ability for lowlevel manipulation.Debugging[edit]The bug from 1947 which is at the origin of a popular but incorrect etymology for the common term for a software defect.Main article: DebuggingDebugging is a very important task in the software development process since having defects in a program can have significant consequences for its users. Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages. Use of a static code analysis tool can help detect some possible problems.Debugging is often done with IDEs like Eclipse Visual Studio Kdevelop NetBeans and Code::Blocks. Standalone debuggers like gdb are also used and these often provide less of a visual environment usually using a command line.Programming languages[edit]Main articles: Programming language and List of programming languagesDifferent programming languages support different styles of programming called programming paradigms. The choice of language used is subject to many considerations such as company policy suitability to task availability of thirdparty packages or individual preference. Ideally the programming language best suited for the task at hand will be selected. Tradeoffs from this ideal involve finding enough programmers who know the language to build a team the availability of compilers for that language and the efficiency with which programs written in a given language execute. Languages form an approximate spectrum from lowlevel to highlevel; lowlevel languages are typically more machineoriented and faster to execute whereas highlevel languages are more abstract and easier to use but execute less quickly. It is usually easier to code in highlevel languages than in lowlevel ones.Allen Downey in his book How To Think Like A Computer Scientist writes:The details look different in different languages but a few basic instructions appear in just about every language:Input: Gather data from the keyboard a file or some other device.Output: Display data on the screen or send data to a file or other device.Arithmetic: Perform basic arithmetical operations like addition and multiplication.Conditional Execution: Check for certain conditions and execute the appropriate sequence of statements.Repetition: Perform some action repeatedly usually with some variation.Many computer languages provide a mechanism to call functions provided by shared libraries. Provided the functions in a library follow the appropriate run time conventions e.g. method of passing arguments then these functions may be written in any other language. 
