OutputWriter.writeMessageOnNewLine("mkdir path - make directory");
OutputWriter.writeMessageOnNewLine("ls depth - traverse directory");
OutputWriter.writeMessageOnNewLine("cmp path1 path2 - compare two files");
OutputWriter.writeMessageOnNewLine("changeDirRel relativePath - change directory");
OutputWriter.writeMessageOnNewLine("changeDir absolutePath - change directory");
OutputWriter.writeMessageOnNewLine("readDb path - read students data base");
OutputWriter.writeMessageOnNewLine("filterExcelent - filter excelent students (the output is written on the console)");
OutputWriter.writeMessageOnNewLine("filterExcelent path - filter excelent students (the output is written in a given path)");
OutputWriter.writeMessageOnNewLine("filterAverage - filter average students (the output is written on the console)");
OutputWriter.writeMessageOnNewLine("filterAverage path - filter average students (the output is written in a file)");
OutputWriter.writeMessageOnNewLine("filterPoor - filter low grade students (the output is on the console)");
OutputWriter.writeMessageOnNewLine("filterPoor path - filter low grade students (the output is written in a file)");
OutputWriter.writeMessageOnNewLine("order - sort students in increasing order (the output is written on the console)");
OutputWriter.writeMessageOnNewLine("order path - sort students in increasing order (the output is written in a given path)");
OutputWriter.writeMessageOnNewLine("decOrder - sort students in decreasing order (the output is written on the console)");
OutputWriter.writeMessageOnNewLine("decOrder path - sort students in decreasing order (the output is written in a given path)");
OutputWriter.writeMessageOnNewLine("download pathOfFile - download file (saved in current directory)");
OutputWriter.writeMessageOnNewLine("downloadAsync path - download file asynchronously (save in the current directory)");
OutputWriter.writeMessageOnNewLine("help - get help");
OutputWriter.writeEmptyLine();